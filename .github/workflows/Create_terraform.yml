on: 
  workflow_dispatch:
    inputs:
      apply:  # Define the 'apply' input
        description: 'Apply Terraform changes'
        required: true
        default: 'false'  # The checkbox will be unchecked by default
        type: choice
        options:
        - Not-Apply
        - Apply
      environment:
        description: 'The name of the environment to be deployed'     
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - uat
        - prod
permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Create infa Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: terraform/dev
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install AWS cli
      id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2 

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_SECRET }}
        role-duration-seconds: 3600
        # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: List S3 storage
      run: aws s3 ls
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out=${{ github.workspace }}/tf.plan
      continue-on-error: true
      
    - name: Check Terraform Plan Status
      run: |
        echo "Terraform plan status: ${{ steps.plan.outcome }}"

    # Add a checkbox prompt for Terraform Apply
    - name: Confirm Terraform Apply
      id: confirm_apply
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Apply Terraform changes?"
        echo "Apply: ${{ github.event.inputs.apply }}"
        echo "::set-output name=apply::${{ toJson(github.event.inputs.apply) }}"
      continue-on-error: true
      env:
        APPLY: ${{ toJson(github.event.inputs.apply) }}
        
    - name: Terraform Apply
      if: steps.confirm_apply.outputs.apply == 'Apply'
      run: terraform apply -auto-approve ${{ github.workspace }}/tf.plan
      continue-on-error: false
